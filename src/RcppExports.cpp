// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// ME
double ME(Eigen::VectorXd x, Eigen::MatrixXd r);
RcppExport SEXP _Rprobit_ME(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(ME(x, r));
    return rcpp_result_gen;
END_RCPP
}
// dlcond_ME
Eigen::VectorXd dlcond_ME(Eigen::VectorXd x, Eigen::MatrixXd r);
RcppExport SEXP _Rprobit_dlcond_ME(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(dlcond_ME(x, r));
    return rcpp_result_gen;
END_RCPP
}
// ME_hess_new
Eigen::MatrixXd ME_hess_new(Eigen::VectorXd x, Eigen::MatrixXd r);
RcppExport SEXP _Rprobit_ME_hess_new(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(ME_hess_new(x, r));
    return rcpp_result_gen;
END_RCPP
}
// SJ
double SJ(Eigen::VectorXd x, Eigen::MatrixXd r);
RcppExport SEXP _Rprobit_SJ(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(SJ(x, r));
    return rcpp_result_gen;
END_RCPP
}
// dlcond
Eigen::VectorXd dlcond(Eigen::VectorXd x, Eigen::MatrixXd r);
RcppExport SEXP _Rprobit_dlcond(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(dlcond(x, r));
    return rcpp_result_gen;
END_RCPP
}
// SJ_hess_new
Eigen::MatrixXd SJ_hess_new(Eigen::VectorXd x, Eigen::MatrixXd r);
RcppExport SEXP _Rprobit_SJ_hess_new(SEXP xSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(SJ_hess_new(x, r));
    return rcpp_result_gen;
END_RCPP
}
// TVBS
Eigen::VectorXd TVBS(Eigen::VectorXd x_norm, Eigen::MatrixXd Cor_mat, int log_out);
RcppExport SEXP _Rprobit_TVBS(SEXP x_normSEXP, SEXP Cor_matSEXP, SEXP log_outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x_norm(x_normSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Cor_mat(Cor_matSEXP);
    Rcpp::traits::input_parameter< int >::type log_out(log_outSEXP);
    rcpp_result_gen = Rcpp::wrap(TVBS(x_norm, Cor_mat, log_out));
    return rcpp_result_gen;
END_RCPP
}
// TVBS_p
double TVBS_p(Eigen::VectorXd x_norm, Eigen::MatrixXd Cor_mat, int log_out);
RcppExport SEXP _Rprobit_TVBS_p(SEXP x_normSEXP, SEXP Cor_matSEXP, SEXP log_outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x_norm(x_normSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Cor_mat(Cor_matSEXP);
    Rcpp::traits::input_parameter< int >::type log_out(log_outSEXP);
    rcpp_result_gen = Rcpp::wrap(TVBS_p(x_norm, Cor_mat, log_out));
    return rcpp_result_gen;
END_RCPP
}
// TVBS_pmvnorm_cpp
double TVBS_pmvnorm_cpp(Eigen::VectorXd upper, Eigen::VectorXd mu, Eigen::MatrixXd Sigma);
RcppExport SEXP _Rprobit_TVBS_pmvnorm_cpp(SEXP upperSEXP, SEXP muSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type upper(upperSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type mu(muSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(TVBS_pmvnorm_cpp(upper, mu, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// TVBS_v2
Eigen::VectorXd TVBS_v2(Eigen::VectorXd x_norm, Eigen::MatrixXd Cor_mat, int log_out);
RcppExport SEXP _Rprobit_TVBS_v2(SEXP x_normSEXP, SEXP Cor_matSEXP, SEXP log_outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x_norm(x_normSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Cor_mat(Cor_matSEXP);
    Rcpp::traits::input_parameter< int >::type log_out(log_outSEXP);
    rcpp_result_gen = Rcpp::wrap(TVBS_v2(x_norm, Cor_mat, log_out));
    return rcpp_result_gen;
END_RCPP
}
// TVBS_pv2
double TVBS_pv2(Eigen::VectorXd x_norm, Eigen::MatrixXd Cor_mat, int log_out);
RcppExport SEXP _Rprobit_TVBS_pv2(SEXP x_normSEXP, SEXP Cor_matSEXP, SEXP log_outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x_norm(x_normSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Cor_mat(Cor_matSEXP);
    Rcpp::traits::input_parameter< int >::type log_out(log_outSEXP);
    rcpp_result_gen = Rcpp::wrap(TVBS_pv2(x_norm, Cor_mat, log_out));
    return rcpp_result_gen;
END_RCPP
}
// TVBS_grad
Eigen::VectorXd TVBS_grad(Eigen::VectorXd x_norm, Eigen::MatrixXd Cor_mat, int log_out);
RcppExport SEXP _Rprobit_TVBS_grad(SEXP x_normSEXP, SEXP Cor_matSEXP, SEXP log_outSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x_norm(x_normSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Cor_mat(Cor_matSEXP);
    Rcpp::traits::input_parameter< int >::type log_out(log_outSEXP);
    rcpp_result_gen = Rcpp::wrap(TVBS_grad(x_norm, Cor_mat, log_out));
    return rcpp_result_gen;
END_RCPP
}
// TVBS_hess_new
Eigen::MatrixXd TVBS_hess_new(Eigen::VectorXd x_norm, Eigen::MatrixXd Cor_mat);
RcppExport SEXP _Rprobit_TVBS_hess_new(SEXP x_normSEXP, SEXP Cor_matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x_norm(x_normSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Cor_mat(Cor_matSEXP);
    rcpp_result_gen = Rcpp::wrap(TVBS_hess_new(x_norm, Cor_mat));
    return rcpp_result_gen;
END_RCPP
}
// ll_macml
NumericVector ll_macml(Eigen::VectorXd theta, Rcpp::List data_obj, Rcpp::List mod, Rcpp::List control);
RcppExport SEXP _Rprobit_ll_macml(SEXP thetaSEXP, SEXP data_objSEXP, SEXP modSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data_obj(data_objSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_macml(theta, data_obj, mod, control));
    return rcpp_result_gen;
END_RCPP
}
// ll_probit
NumericVector ll_probit(Eigen::VectorXd theta, Rcpp::List data_obj, Rcpp::List mod, Rcpp::List control);
RcppExport SEXP _Rprobit_ll_probit(SEXP thetaSEXP, SEXP data_objSEXP, SEXP modSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data_obj(data_objSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_probit(theta, data_obj, mod, control));
    return rcpp_result_gen;
END_RCPP
}
// pred_probit_approx
Eigen::MatrixXd pred_probit_approx(Eigen::VectorXd theta, Rcpp::List data, Rcpp::List mod, Rcpp::List control);
RcppExport SEXP _Rprobit_pred_probit_approx(SEXP thetaSEXP, SEXP dataSEXP, SEXP modSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(pred_probit_approx(theta, data, mod, control));
    return rcpp_result_gen;
END_RCPP
}
// int2cats
Eigen::VectorXd int2cats(int num, int cat, int noBits);
RcppExport SEXP _Rprobit_int2cats(SEXP numSEXP, SEXP catSEXP, SEXP noBitsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type num(numSEXP);
    Rcpp::traits::input_parameter< int >::type cat(catSEXP);
    Rcpp::traits::input_parameter< int >::type noBits(noBitsSEXP);
    rcpp_result_gen = Rcpp::wrap(int2cats(num, cat, noBits));
    return rcpp_result_gen;
END_RCPP
}
// ll_probit_person
NumericVector ll_probit_person(Rcpp::List X_n, Eigen::VectorXd theta, Rcpp::List mod, int pairwise, std::string approx_method);
RcppExport SEXP _Rprobit_ll_probit_person(SEXP X_nSEXP, SEXP thetaSEXP, SEXP modSEXP, SEXP pairwiseSEXP, SEXP approx_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type X_n(X_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< int >::type pairwise(pairwiseSEXP);
    Rcpp::traits::input_parameter< std::string >::type approx_method(approx_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_probit_person(X_n, theta, mod, pairwise, approx_method));
    return rcpp_result_gen;
END_RCPP
}
// ll_probit_contrib_R
NumericVector ll_probit_contrib_R(Rcpp::List X_n, Eigen::VectorXd y_n, Eigen::VectorXd theta, Rcpp::List mod, std::string approx_method);
RcppExport SEXP _Rprobit_ll_probit_contrib_R(SEXP X_nSEXP, SEXP y_nSEXP, SEXP thetaSEXP, SEXP modSEXP, SEXP approx_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type X_n(X_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y_n(y_nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< std::string >::type approx_method(approx_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_probit_contrib_R(X_n, y_n, theta, mod, approx_method));
    return rcpp_result_gen;
END_RCPP
}
// ll_macml_norm_factor
double ll_macml_norm_factor(Eigen::VectorXd theta, Rcpp::List data_obj, Rcpp::List mod, Rcpp::List control);
RcppExport SEXP _Rprobit_ll_macml_norm_factor(SEXP thetaSEXP, SEXP data_objSEXP, SEXP modSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data_obj(data_objSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_macml_norm_factor(theta, data_obj, mod, control));
    return rcpp_result_gen;
END_RCPP
}
// ll_macml_norm
NumericVector ll_macml_norm(Eigen::VectorXd theta, Rcpp::List data_obj, Rcpp::List mod, Rcpp::List control);
RcppExport SEXP _Rprobit_ll_macml_norm(SEXP thetaSEXP, SEXP data_objSEXP, SEXP modSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data_obj(data_objSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_macml_norm(theta, data_obj, mod, control));
    return rcpp_result_gen;
END_RCPP
}
// makeAM
Eigen::MatrixXd makeAM(int y, int alt);
RcppExport SEXP _Rprobit_makeAM(SEXP ySEXP, SEXP altSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type alt(altSEXP);
    rcpp_result_gen = Rcpp::wrap(makeAM(y, alt));
    return rcpp_result_gen;
END_RCPP
}
// ll_macml_norm_est
NumericVector ll_macml_norm_est(Eigen::VectorXd theta, Rcpp::List data_obj, Rcpp::List mod, Rcpp::List control);
RcppExport SEXP _Rprobit_ll_macml_norm_est(SEXP thetaSEXP, SEXP data_objSEXP, SEXP modSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data_obj(data_objSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_macml_norm_est(theta, data_obj, mod, control));
    return rcpp_result_gen;
END_RCPP
}
// ll_macml_o
NumericVector ll_macml_o(Eigen::VectorXd theta, Rcpp::List data_obj, Rcpp::List mod, Rcpp::List control);
RcppExport SEXP _Rprobit_ll_macml_o(SEXP thetaSEXP, SEXP data_objSEXP, SEXP modSEXP, SEXP controlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type data_obj(data_objSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type control(controlSEXP);
    rcpp_result_gen = Rcpp::wrap(ll_macml_o(theta, data_obj, mod, control));
    return rcpp_result_gen;
END_RCPP
}
// prob_ordered
double prob_ordered(Eigen::VectorXd xb, Eigen::VectorXd y_n, Eigen::MatrixXd Lambda, int alt, Eigen::VectorXd dtauk, std::string approx_method);
RcppExport SEXP _Rprobit_prob_ordered(SEXP xbSEXP, SEXP y_nSEXP, SEXP LambdaSEXP, SEXP altSEXP, SEXP dtaukSEXP, SEXP approx_methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y_n(y_nSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< int >::type alt(altSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type dtauk(dtaukSEXP);
    Rcpp::traits::input_parameter< std::string >::type approx_method(approx_methodSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_ordered(xb, y_n, Lambda, alt, dtauk, approx_method));
    return rcpp_result_gen;
END_RCPP
}
// pred_probit_ordered_approx
Eigen::MatrixXd pred_probit_ordered_approx(Eigen::VectorXd theta, Eigen::MatrixXd Xn, Eigen::VectorXd yn, Rcpp::List mod);
RcppExport SEXP _Rprobit_pred_probit_ordered_approx(SEXP thetaSEXP, SEXP XnSEXP, SEXP ynSEXP, SEXP modSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Xn(XnSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type yn(ynSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mod(modSEXP);
    rcpp_result_gen = Rcpp::wrap(pred_probit_ordered_approx(theta, Xn, yn, mod));
    return rcpp_result_gen;
END_RCPP
}
// Hess_pdf
Eigen::MatrixXd Hess_pdf(double w0, double w1, double rho);
RcppExport SEXP _Rprobit_Hess_pdf(SEXP w0SEXP, SEXP w1SEXP, SEXP rhoSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type w0(w0SEXP);
    Rcpp::traits::input_parameter< double >::type w1(w1SEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    rcpp_result_gen = Rcpp::wrap(Hess_pdf(w0, w1, rho));
    return rcpp_result_gen;
END_RCPP
}
// biv_gen_cdf
double biv_gen_cdf(Eigen::VectorXd b, Eigen::MatrixXd Sigma);
RcppExport SEXP _Rprobit_biv_gen_cdf(SEXP bSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(biv_gen_cdf(b, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// grad_gen_cdf
Eigen::VectorXd grad_gen_cdf(Eigen::VectorXd b, Eigen::MatrixXd Sigma);
RcppExport SEXP _Rprobit_grad_gen_cdf(SEXP bSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_gen_cdf(b, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// Hess_gen_cdf
Eigen::MatrixXd Hess_gen_cdf(Eigen::VectorXd b, Eigen::MatrixXd Sigma);
RcppExport SEXP _Rprobit_Hess_gen_cdf(SEXP bSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Hess_gen_cdf(b, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// grad_gen_tvn_cdf
Eigen::VectorXd grad_gen_tvn_cdf(Eigen::VectorXd b, Eigen::MatrixXd Sigma);
RcppExport SEXP _Rprobit_grad_gen_tvn_cdf(SEXP bSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(grad_gen_tvn_cdf(b, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// Hessian_gen_tvn_cdf
Eigen::MatrixXd Hessian_gen_tvn_cdf(Eigen::VectorXd b, Eigen::MatrixXd Sigma);
RcppExport SEXP _Rprobit_Hessian_gen_tvn_cdf(SEXP bSEXP, SEXP SigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b(bSEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Sigma(SigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(Hessian_gen_tvn_cdf(b, Sigma));
    return rcpp_result_gen;
END_RCPP
}
// duplmat
Eigen::MatrixXd duplmat(int n);
RcppExport SEXP _Rprobit_duplmat(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(duplmat(n));
    return rcpp_result_gen;
END_RCPP
}
// vechor
Eigen::MatrixXd vechor(int k);
RcppExport SEXP _Rprobit_vechor(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(vechor(k));
    return rcpp_result_gen;
END_RCPP
}
// fdiag
Eigen::VectorXd fdiag(int k);
RcppExport SEXP _Rprobit_fdiag(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(fdiag(k));
    return rcpp_result_gen;
END_RCPP
}
// vechor_diag
Eigen::MatrixXd vechor_diag(int k);
RcppExport SEXP _Rprobit_vechor_diag(SEXP kSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    rcpp_result_gen = Rcpp::wrap(vechor_diag(k));
    return rcpp_result_gen;
END_RCPP
}
// commmat
Eigen::MatrixXd commmat(int r, int c);
RcppExport SEXP _Rprobit_commmat(SEXP rSEXP, SEXP cSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type r(rSEXP);
    Rcpp::traits::input_parameter< int >::type c(cSEXP);
    rcpp_result_gen = Rcpp::wrap(commmat(r, c));
    return rcpp_result_gen;
END_RCPP
}
// elimmat
Eigen::MatrixXd elimmat(int n);
RcppExport SEXP _Rprobit_elimmat(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(elimmat(n));
    return rcpp_result_gen;
END_RCPP
}
// J_chol
Eigen::MatrixXd J_chol(Eigen::VectorXd x);
RcppExport SEXP _Rprobit_J_chol(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(J_chol(x));
    return rcpp_result_gen;
END_RCPP
}
// prob_ordered_2
double prob_ordered_2(Eigen::VectorXd xb, Eigen::VectorXd y, Eigen::MatrixXd Lambda, int alt, Eigen::VectorXd dtauk);
RcppExport SEXP _Rprobit_prob_ordered_2(SEXP xbSEXP, SEXP ySEXP, SEXP LambdaSEXP, SEXP altSEXP, SEXP dtaukSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< int >::type alt(altSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type dtauk(dtaukSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_ordered_2(xb, y, Lambda, alt, dtauk));
    return rcpp_result_gen;
END_RCPP
}
// prob_ordered_CML
double prob_ordered_CML(Eigen::VectorXd xb, Eigen::VectorXd y, Eigen::MatrixXd Lambda, int alt, Eigen::VectorXd dtauk, int cml_pair_type);
RcppExport SEXP _Rprobit_prob_ordered_CML(SEXP xbSEXP, SEXP ySEXP, SEXP LambdaSEXP, SEXP altSEXP, SEXP dtaukSEXP, SEXP cml_pair_typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< int >::type alt(altSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type dtauk(dtaukSEXP);
    Rcpp::traits::input_parameter< int >::type cml_pair_type(cml_pair_typeSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_ordered_CML(xb, y, Lambda, alt, dtauk, cml_pair_type));
    return rcpp_result_gen;
END_RCPP
}
// prob_ordered_1
double prob_ordered_1(double xb, int y1, double Lambda, int alt, Eigen::VectorXd dtauk);
RcppExport SEXP _Rprobit_prob_ordered_1(SEXP xbSEXP, SEXP y1SEXP, SEXP LambdaSEXP, SEXP altSEXP, SEXP dtaukSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type xb(xbSEXP);
    Rcpp::traits::input_parameter< int >::type y1(y1SEXP);
    Rcpp::traits::input_parameter< double >::type Lambda(LambdaSEXP);
    Rcpp::traits::input_parameter< int >::type alt(altSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type dtauk(dtaukSEXP);
    rcpp_result_gen = Rcpp::wrap(prob_ordered_1(xb, y1, Lambda, alt, dtauk));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_Rprobit_ME", (DL_FUNC) &_Rprobit_ME, 2},
    {"_Rprobit_dlcond_ME", (DL_FUNC) &_Rprobit_dlcond_ME, 2},
    {"_Rprobit_ME_hess_new", (DL_FUNC) &_Rprobit_ME_hess_new, 2},
    {"_Rprobit_SJ", (DL_FUNC) &_Rprobit_SJ, 2},
    {"_Rprobit_dlcond", (DL_FUNC) &_Rprobit_dlcond, 2},
    {"_Rprobit_SJ_hess_new", (DL_FUNC) &_Rprobit_SJ_hess_new, 2},
    {"_Rprobit_TVBS", (DL_FUNC) &_Rprobit_TVBS, 3},
    {"_Rprobit_TVBS_p", (DL_FUNC) &_Rprobit_TVBS_p, 3},
    {"_Rprobit_TVBS_pmvnorm_cpp", (DL_FUNC) &_Rprobit_TVBS_pmvnorm_cpp, 3},
    {"_Rprobit_TVBS_v2", (DL_FUNC) &_Rprobit_TVBS_v2, 3},
    {"_Rprobit_TVBS_pv2", (DL_FUNC) &_Rprobit_TVBS_pv2, 3},
    {"_Rprobit_TVBS_grad", (DL_FUNC) &_Rprobit_TVBS_grad, 3},
    {"_Rprobit_TVBS_hess_new", (DL_FUNC) &_Rprobit_TVBS_hess_new, 2},
    {"_Rprobit_ll_macml", (DL_FUNC) &_Rprobit_ll_macml, 4},
    {"_Rprobit_ll_probit", (DL_FUNC) &_Rprobit_ll_probit, 4},
    {"_Rprobit_pred_probit_approx", (DL_FUNC) &_Rprobit_pred_probit_approx, 4},
    {"_Rprobit_int2cats", (DL_FUNC) &_Rprobit_int2cats, 3},
    {"_Rprobit_ll_probit_person", (DL_FUNC) &_Rprobit_ll_probit_person, 5},
    {"_Rprobit_ll_probit_contrib_R", (DL_FUNC) &_Rprobit_ll_probit_contrib_R, 5},
    {"_Rprobit_ll_macml_norm_factor", (DL_FUNC) &_Rprobit_ll_macml_norm_factor, 4},
    {"_Rprobit_ll_macml_norm", (DL_FUNC) &_Rprobit_ll_macml_norm, 4},
    {"_Rprobit_makeAM", (DL_FUNC) &_Rprobit_makeAM, 2},
    {"_Rprobit_ll_macml_norm_est", (DL_FUNC) &_Rprobit_ll_macml_norm_est, 4},
    {"_Rprobit_ll_macml_o", (DL_FUNC) &_Rprobit_ll_macml_o, 4},
    {"_Rprobit_prob_ordered", (DL_FUNC) &_Rprobit_prob_ordered, 6},
    {"_Rprobit_pred_probit_ordered_approx", (DL_FUNC) &_Rprobit_pred_probit_ordered_approx, 4},
    {"_Rprobit_Hess_pdf", (DL_FUNC) &_Rprobit_Hess_pdf, 3},
    {"_Rprobit_biv_gen_cdf", (DL_FUNC) &_Rprobit_biv_gen_cdf, 2},
    {"_Rprobit_grad_gen_cdf", (DL_FUNC) &_Rprobit_grad_gen_cdf, 2},
    {"_Rprobit_Hess_gen_cdf", (DL_FUNC) &_Rprobit_Hess_gen_cdf, 2},
    {"_Rprobit_grad_gen_tvn_cdf", (DL_FUNC) &_Rprobit_grad_gen_tvn_cdf, 2},
    {"_Rprobit_Hessian_gen_tvn_cdf", (DL_FUNC) &_Rprobit_Hessian_gen_tvn_cdf, 2},
    {"_Rprobit_duplmat", (DL_FUNC) &_Rprobit_duplmat, 1},
    {"_Rprobit_vechor", (DL_FUNC) &_Rprobit_vechor, 1},
    {"_Rprobit_fdiag", (DL_FUNC) &_Rprobit_fdiag, 1},
    {"_Rprobit_vechor_diag", (DL_FUNC) &_Rprobit_vechor_diag, 1},
    {"_Rprobit_commmat", (DL_FUNC) &_Rprobit_commmat, 2},
    {"_Rprobit_elimmat", (DL_FUNC) &_Rprobit_elimmat, 1},
    {"_Rprobit_J_chol", (DL_FUNC) &_Rprobit_J_chol, 1},
    {"_Rprobit_prob_ordered_2", (DL_FUNC) &_Rprobit_prob_ordered_2, 5},
    {"_Rprobit_prob_ordered_CML", (DL_FUNC) &_Rprobit_prob_ordered_CML, 6},
    {"_Rprobit_prob_ordered_1", (DL_FUNC) &_Rprobit_prob_ordered_1, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_Rprobit(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
